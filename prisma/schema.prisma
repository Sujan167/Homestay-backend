generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================= Models ==================

// Enum for user roles
enum Role {
  GUEST
  OWNER
  COMMUNITY_OWNER
  SUPERUSER
}

// Enum for verification status
enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

// User model
model User {
  id                 Int                @id @default(autoincrement())
  name               String
  email              String             @unique
  password           String
  role               Role               @default(GUEST)
  phoneNumber        String?
  address            String?
  verificationStatus VerificationStatus @default(PENDING)
  profilePicture     String?
  refreshToken       String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Booking   Booking[]
  Homestay  Homestay[]
  OTP       Otp[]

  @@index([id, email, role])
}

model Otp {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otpCode   String // The OTP itself
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, otpCode])
}

enum RoomStatus {
  AVAILABLE
  BOOKED
}

// Room Model
model Room {
  id          Int        @id @default(autoincrement())
  homestay    Homestay   @relation(fields: [homestayId], references: [id])
  homestayId  Int
  name        String
  description String
  price       Float
  adults      Int        @default(1)
  children    Int?       @default(0)
  totalPeople Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      RoomStatus @default(AVAILABLE)

  @@index([homestayId, price])
}

model Facility {
  id        Int                @id @default(autoincrement())
  name      String             @unique // Example: "WiFi", "Parking", "Swimming Pool"
  homestays HomestayFacility[]
}

model HomestayFacility {
  id         Int      @id @default(autoincrement())
  homestayId Int
  homestay   Homestay @relation(fields: [homestayId], references: [id])
  facilityId Int
  facility   Facility @relation(fields: [facilityId], references: [id])
}

// Homestay model
model Homestay {
  id            Int                @id @default(autoincrement())
  name          String
  description   String
  location      String
  ownerId       Int // Can be a Community Owner or a Homestay Owner
  ownerType     Role // Either OWNER or COMMUNITY_OWNER
  totalCapacity Int                @default(1)
  totalBooked   Int                @default(0)
  checkIn       DateTime
  checkOut      DateTime
  images        String[]
  status        VerificationStatus @default(PENDING)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  bookings         Booking[]
  HomestayFacility HomestayFacility[]
  owner            User               @relation(fields: [ownerId], references: [id])
  Room             Room[]

  @@index([location, ownerId])
}

// Booking model
model Booking {
  id                 Int                @id @default(autoincrement())
  homestay           Homestay           @relation(fields: [homestayId], references: [id])
  homestayId         Int
  guest              User               @relation(fields: [guestId], references: [id])
  guestId            Int
  checkIn            DateTime
  checkOut           DateTime
  adults             Int                @default(1)
  children           Int?               @default(0)
  totalPeople        Int                @default(1)
  status             VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  canceledAt         DateTime? // Track cancellation timestamp (NULL if not canceled)
  cancellationReason String? // Store reason for cancellation (Optional)
  Transaction        Transaction[]

  @@index([homestayId, guestId])
}

// Payment Platform Table
model PaymentPlatform {
  id           Int           @id @default(autoincrement())
  name         String        @unique // Example: "Stripe", "PayPal", "Khalti", "eSewa"
  transactions Transaction[]

  @@index([name])
}

// Transaction Table
model Transaction {
  id                Int               @id @default(autoincrement())
  booking           Booking           @relation(fields: [bookingId], references: [id])
  bookingId         Int
  paymentPlatform   PaymentPlatform   @relation(fields: [paymentPlatformId], references: [id])
  paymentPlatformId Int
  amount            Float
  currency          String // Example: "USD", "NPR"
  status            TransactionStatus @default(PENDING)
  transactionId     String            @unique // External Transaction ID from Stripe, PayPal, etc.
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([bookingId, paymentPlatformId, status])
}

// Enum for Transaction Status
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
